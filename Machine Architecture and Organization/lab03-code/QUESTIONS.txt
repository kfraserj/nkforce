			   __________________

			    LAB 03 QUESTIONS
			   __________________


- Name: Ju-Yu, Chou Fu
- NetID: chouf001

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete the
lab.


PROBLEM 1: C Text and Binary I/O
================================

  Examine the code blocks below which involve I/O with text and binary
  data. Each example contains a logic error which will lead to
  problems. Describe what the correction is and provide code if needed.


A
~

  ,----
  | FILE *fin = fopen(...,"r");
  | int buf[4];             // store 4 ints from file in this array 
  | fread(buf, 4, 1, fin);  // want to read 4 ints from fin into buf (error)
  `----
  Describe why the marked line is an error and provide a correction.
  
  
  1. second arguement assumes the int on this machine would be 4 bytes, which is not always true on other machines.
  2. the third argument tells fread how many data we want it to read. it should be 4 in this case.

  rewrite the fread():

  fread(buf, sizeof(int), 4, fin);
  
B
~

  ,----
  | FILE *fout = fopen(...,"w");
  | int length = ...;
  | double *buf = malloc(length*sizeof(double)); 
  | // fill in buf with values
  | for(int i=0; i<length; i++){           // write ints from buf one at a time
  |   fwrite(buf, sizeof(double), 1, fout);   // error
  | }
  `----
   
    for(int i=0; i<length; i++){
      fwrite(&buf[i], sizeof(double), 1, fout);
    }

C
~

  ,----
  | FILE *fin = fopen(...,"r");
  | char buf[100];             // store up to 100 characters
  | int pos = 0;
  | while(1){
  |   int result = fscanf(fin, "%d", &buf[pos]);
  |   if(result == EOF){
  |     break;
  |   }
  |   pos++;
  | }
  | // error in logic, may overflow buf: why?
  `----
  
   replace the specifier %d with %c. when pos become greater than 99, buf will overflow

   FILE *fin = fopen(...,"r");
   char buf[100];             // store up to 100 characters
   int pos = 0;
   while(pos<100){
     int result = fscanf(fin, "%c", &buf[pos]);
     if(result == EOF){
       break;
     }
     pos++;
   }
C
~

  ,----
  | // read two binary ints from given file, return pointer to them
  | int *read_2_ints(char *fname){  
  |   FILE *fin = fopen(fname,"r");
  |   int buf[2];
  |   fread(buf, sizeof(int), 2, fin);
  |   return buf;  // compile error
  | }
  `----

  We need to malloc memory for buf if we want to return it for other uses.

  
  int *read_2_ints(char *fname){  
     FILE *fin = fopen(fname,"r");
     int *buf = malloc(2*sizeof(int));
     fread(buf, sizeof(int), 2, fin);
     return buf;  
  }




PROBLEM 2: Number conversions
=============================

A
~

  Fill in the following table of equivalences.  Filling in the table
  from top to bottom is advantageous as earlier rows can sometimes be
  used to infer lower values. Feel free to make use of any ASCII table
  or the table.c program provided in the week 3 lecture code pack.

   Dec   Hex  Oct  Binary     Char         
  -----------------------------------------
     9  0x09   11  0000 1001  TAB          
    10  0x0A   12  0000 1010  \n (newline) 
    32  0x20   40  0010 0000  SPACE        
    50  0x32   62  0011 0010  2            
    65  0x41  101  0100 0001  A            
    66  0x42  102  0100 0010  B           
    79  0x4F  117  1110 0101  O            
    80  0x50  120  1010 0000  P            
    91  0x5B  133  0101 1011  [            
    97  0x61  141  1100 0001  a            
   122  0x7A  172  0111 1010  z            
   145  0x91  221  1001 0001  none         
   160  0xA0  240  1010 0000  none         
   180  0xB4  264  1011 0100  none         
   255  0xFF  377  1111 1111  none         


B
~

  Fill in the bits, hex, and decimal values for the given examples. The
  first example is completed for you. Assume all of these are 32 bit
  unsigned integers.
  ,----
  | COMPLETED
  | Binary:   0000 0000  0000 0000  0001 1000  1110 1001  
  | 	  0    0     0    0     1    8     E    9
  | Hex   :   0018E9
  | Decimal:  6377
  | 
  | 
  | NUMBER 1
  | Binary:   0000 0000  0010 1111  0011 1010  1000 1101  
  | 	  ?
  | Hex   :   002F3A8D
  | Decimal:  3095181
  | 
  | 
  | NUMBER 2
  | Binary:   0111 1111  1000 0011  0101 1010  0000 1011
  | 	  7    F     8    3     5    A     0    B
  | Hex   :   7F835A0B
  | Decimal:  2139314699
  `----


PROBLEM 3: Signed Integer Conversions
=====================================

A
~

  Apply the steps involved in converting the following positive binary
  number to it's two's complement negation in 8-bit signed
  format. Recall the steps are
  - Subtract 1
  - Invert the bits
  ,----
  | 0111 1100  = 0x7C = 124 (decimal)
  `----

  0111 1100 = +124
 -        1
 ----------
  0111 1011 = +123

 ~0111 1011 = +123
 ----------
  1000 0100 = -124

  The result is the two's complement representation of -124.

  Reverse the process by
  - Invert the bits
  - Add one
  to show that the original bits are gotten back.

 ~1000 0100 = -124
 ----------
  0111 1011 = +123

  0111 1011 = +123
 +        1
 ----------
  0111 1100 = +124

B
~

  Complete the following table of equivalences assuming 8-bit
  twos-complement signed integers. The rightmost column is the inverse
  of the binary representation: flip 1's to 0's, and vice versa.

    Dec   Hex  Binary     Inverse   
  ----------------------------------
     +5  0x05  0000 0101  1111 1010 
     -5  0xFB  1111 1011  0000 0100          
    +32  0x20  0010 0000  1101 1111 
    -32  0xE0  1110 0000  0001 1111 
   +127  0x7F  0111 1111  1000 0000
   -127  0x81  1000 0001  0111 1110 
   -128  0x80  1000 0000  0111 1111 
     +2  0x02  0000 0010  1111 1101
     -2  0xFE  1111 1110  0000 0001 
     +1  0x01  0000 0001  1111 1110 
     -1  0xFF  1111 1111  0000 0000 
      0  0x00  0000 0000  1111 1111


PROBLEM 4: Converting Strings to Numbers
========================================

  Inspect the program in the lab pack called `convert.c'.  Compile and
  run it using
  ,----
  | > gcc convert.c
  | > ./a.out
  `----
  Describe briefly what kind of conversion is being done by the
  `convert()' function given.
  - A. What kind of data is input?
	str is a char array of numbers and num is an int.
  - B. What result is produced by the function?
	the function turns a char array of numbers into an integer; For example, a string "124" will become an 		integer : 124
  - C. How is a success versus an error reported?
	err = 0 stands for success and err = 1 stands for fail.
  - D. Why is this kind of conversion needed?
	a char takes 1 bytes. an int take 4 bytes. suppose we have a char array of numbers "12345678", this char 	array takes 8 bytes. if we turn it into int, it will only 4 bytes.
	furthermore, these "char numbers" can not be used as int. they can't do math operations. We need to convert 		the "char numbers" to binary integers.
  - E. What built-in C function does this conversion?
       atoi(&char)
