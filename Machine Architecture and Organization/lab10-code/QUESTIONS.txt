			   __________________

			    LAB 10 QUESTIONS
			   __________________


- Name: Ju-Yu, Chou Fu
- NetID: chouf001

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete the
lab.


PROBLEM 1: Code Overview
========================

(A) Vector and Matrix
~~~~~~~~~~~~~~~~~~~~~

  Examine the header file `matvec.h' which gives type definitions and
  declares functions associated with a simple matrix and vector type.

  For the matrix type `matrix_t' with R rows and C columns, how is a 2D
  matrix actually laid out in memory?

	from matvec.h, we can see the code:
	#define MSET(mat,i,j,x) ((mat).data[((i)*((mat).cols)) + (j)] = (x))

	there are R chunks of row lay out in memory and each chunk has C columns
  for example, if we have 2 rows and 4 columns matrix:

	R1-----1 chunk----------R2
	R1c1  R1c2  R1c3  R1c4  R2c1  R2c2  R2c3  R2c4 <- exactly how the matrix_t lay
	out in memory, it looks like an 1D-array

 #1024 #1028 #1032 #1036 #1040 #1044 #1048 #1052 <- suppose we have int element.



(B) Getting and Setting Elements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  For the `matrix_t' and `vector_t' types, convenient means to get and
  set elements is provided. This mechanism is used in the utility
  functions in `matvec_util.c' and defined in `matvec.h'.

  Describe how one would get element (R,C) of `matrix_t' or set it to
  value Z.  Why are these mechanisms not functions?

	any file that includes matvec.h can simply use these macros: MGET, VGET, MSET, VSET

	and macros are faster than functions.

PROBLEM 2: Timing Rows vs Columns
=================================

(A) row_sums vs col_sums Timing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Compile and run the `matsums_main' executable using the provided
  `Makefile' (typing `make' should suffice).

  Run this program with differing parameters which control the number of
  rows and columns in the matrix which is summed. Show some example runs
  with different parameters including on large square matrix with 8000
  rows and 8000 columns.

  Note any speed differences between the two on large matrices.

	./matsums_main 8000 8000
	row_sums CPU usage: 4.9134e-02 sec
  col_sums CPU usage: 1.4333e-01 sec

	./matsums_main 8000 4000
	row_sums CPU usage: 2.4606e-02 sec
  col_sums CPU usage: 6.4301e-02 sec

  ./matsums_main 4000 8000
	row_sums CPU usage: 2.4993e-02 sec
  col_sums CPU usage: 6.5964e-02 sec


(B) row_sums vs col_sums speed
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Examine the source code for the functions `row_sums()' and
  `col_sums()' in the file `matsums_funcs.c'.  Describe why the
  timing/speed differences you observed previously are occurring based
  on features of the source code you see and the layout of the
  `matrix_t' that is being summed.

	col_sums needs more strides to jump to next element than row_sums does, which
	means col_sums can't use the advantage of caches. Hence, col_sums is slower
	than row_sums.

PROBLEM 3: opt_col_sums()
=========================

  Complete the function `opt_col_sums()' in file `matsums_funcs.c'. This
  function should have identical behavior to `col_sums()' (it sums the
  columns of the matrix into a provided array). However, it should be
  *optimized* so that it achieves performance near to that of the
  `row_sums()' function. To achieve this, re-arrange the loops to
  iterate as efficiently as possible with respect to the memory
  system. Feel free to ask course staff for hints on how to do this or
  do some online research.

  To time `opt_col_sums()', uncomment relevant blocks in the
  `matsums_main.c' program that are provided for it.

  Paste your source code and a copy of the timing results of running
  `matsums_main' on an 8000 by 8000 matrix.

	./matsums_main 8000 8000
	row_sums CPU usage: 4.6147e-02 sec
  col_sums CPU usage: 1.4179e-01 sec
  opt_col_sums CPU usage: 6.0770e-02 sec

	int opt_col_sums(matrix_t mat, vector_t csums){
	  if(mat.cols != csums.len){
	    printf("size mismatch: mat.cols %ld != rsums.len %ld\n",
	           mat.cols,csums.len);
	    return 1;
	  }
	  //set csums to 0
	  for (int x = 0; x < mat.cols; x++) {
	    VSET(csums, x, 0);
	  }

	  for(int i=0; i<mat.rows; i++){
	    for(int j=0; j<mat.cols; j++){
	      int x = MGET(mat, i, j) + VGET(csums, j);
	      VSET(csums, j, x);
	    }
	  }
	  return 0;
	}
