			   __________________

			    LAB 14 QUESTIONS
			   __________________


- Name: Ju-Yu, Chou Fu
- NetID: chouf001

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete the
lab.


PROBLEM 1: Basic Library Linking
================================

(A)
~~~

  The file `do_math.c' contains some basic usage of the C library math
  functions like `pow()'.  Compile this program using the command line
  ,----
  | > gcc do_math.c
  `----
  and show the results below which should be problematic. Describe why
  the linker complains about functions like `cos' and `pow'.

	do_math.c:(.text+0x2a): undefined reference to `cos'
	do_math.c:(.text+0x45): undefined reference to `sin'
	do_math.c:(.text+0x6c): undefined reference to `pow'
	collect2: error: ld returned 1 exit status

	to be able to compile the program, we need to have math.h link to the main
	program

(B)
~~~

  In order to fix this problem, one must link the program against the
  math library typically called `libm'. This can be done with the option
  `-l' for "library" and `m' for the math library as shown:
  ,----
  | > gcc do_math.c -lm
  `----

  Show a run of the resulting executable after a successful compile
  below.

	E is 2.718
	cos(E) is -0.912
	sin(E) is 0.411
	E^2 is 7.389
	program pid is 25877


(C)
~~~

  After successfully compiling `do_math.c', use the `ldd' command to
  examine which dynamically linked libraries it requires to
  run. Assuming the executable is named `a.out', invoke the command like
  this
  ,----
  | > ldd a.out
  `----
  Show the output for this command and not anything related to the math
  library that is reported.

  libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fead16ee000)

(D)
~~~

  Run the program which should report its Process ID (pid) before
  pausing.  In a separate terminal, while the program is still running,
  execute the pmap command to see the virtual address space for the
  program (command `pmap <pid>'). Paste the results below and describe
  any relation to the math library that is apparent.

	12819:   ./a.out
	0000000000400000      4K r-x-- a.out
	0000000000600000      4K r---- a.out
	0000000000601000      4K rw--- a.out
	0000000000a65000    132K rw---   [ anon ]
	00007f395a7b1000   1792K r-x-- libc-2.23.so
	00007f395a971000   2048K ----- libc-2.23.so
	00007f395ab71000     16K r---- libc-2.23.so
	00007f395ab75000      8K rw--- libc-2.23.so
	00007f395ab77000     16K rw---   [ anon ]
	00007f395ab7b000   1056K r-x-- libm-2.23.so   - math library
	00007f395ac83000   2044K ----- libm-2.23.so   - math library
	00007f395ae82000      4K r---- libm-2.23.so		- math library
	00007f395ae83000      4K rw--- libm-2.23.so   - math library
	00007f395ae84000    152K r-x-- ld-2.23.so
	00007f395b04b000     16K rw---   [ anon ]
	00007f395b0a9000      4K r---- ld-2.23.so
	00007f395b0aa000      4K rw--- ld-2.23.so
	00007f395b0ab000      4K rw---   [ anon ]
	00007fff6efe8000    132K rw---   [ stack ]
	00007fff6f01c000     12K r----   [ anon ]
	00007fff6f01f000      8K r-x--   [ anon ]
	ffffffffff600000      4K r-x--   [ anon ]

(E)
~~~

  Repeat the general steps above with the C file `do_pthreads.c' which
  will require linking to the PThreads library with `-lpthread'.
  - Compile to show error messages
  - Compile successfully with proper linking and show output
  - Call `ldd' on the executable
  - While the program is paused, run `pmap' to see its virtual address
    space

  Show the output of these commands below.

- Compile to show error messages
do_pthreads.c:(.text+0x5f): undefined reference to `pthread_create'
do_pthreads.c:(.text+0x7a): undefined reference to `pthread_create'
do_pthreads.c:(.text+0x95): undefined reference to `pthread_join'
collect2: error: ld returned 1 exit status

- Compile successfully with proper linking and show output
main: I am the main thread
doit: I am thread 2
doit: I am thread 1
program pid is 18383

- Call `ldd' on the executable
libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f4fb3f42000)

- While the program is paused, run `pmap' to see its virtual address
	space
0000000000400000      4K r-x-- a.out
0000000000600000      4K r---- a.out
0000000000601000      4K rw--- a.out
0000000000e28000    132K rw---   [ anon ]
00007f7774000000    132K rw---   [ anon ]
00007f7774021000  65404K -----   [ anon ]
00007f777bc38000      4K -----   [ anon ]
00007f777bc39000   8192K rw---   [ anon ]
00007f777c439000      4K -----   [ anon ]
00007f777c43a000   8192K rw---   [ anon ]
00007f777cc3a000   1792K r-x-- libc-2.23.so
00007f777cdfa000   2048K ----- libc-2.23.so
00007f777cffa000     16K r---- libc-2.23.so
00007f777cffe000      8K rw--- libc-2.23.so
00007f777d000000     16K rw---   [ anon ]
00007f777d004000     96K r-x-- libpthread-2.23.so
00007f777d01c000   2044K ----- libpthread-2.23.so
00007f777d21b000      4K r---- libpthread-2.23.so
00007f777d21c000      4K rw--- libpthread-2.23.so
00007f777d21d000     16K rw---   [ anon ]
00007f777d221000    152K r-x-- ld-2.23.so
00007f777d3e8000     16K rw---   [ anon ]
00007f777d446000      4K r---- ld-2.23.so
00007f777d447000      4K rw--- ld-2.23.so
00007f777d448000      4K rw---   [ anon ]
00007fffc6cf9000    132K rw---   [ stack ]
00007fffc6d82000     12K r----   [ anon ]
00007fffc6d85000      8K r-x--   [ anon ]
ffffffffff600000      4K r-x--   [ anon ]
 total            88452K



PROBLEM 2: Linking Static Libraries
===================================

(A)
~~~

  Libraries come in two flavors. The default type is Dynamically Linked
  Shared Libraries that were demonstrated above.  An older but easier to
  understand type are Statically Linked libraries.

  The search functions from Assignment 4 like `binary_array_search()'
  have been formed into a Statically Linked Library in the directory
  `libsearch_static/'.

  Change into this directory and perform a
  ,----
  | > make
  `----
  to build the library.

  Describe the commands you see issued for it and what command creates
  the final library file. Note what file extension (`lib.something') the
  static library has in your answer.

gcc -g -Wall -c tree.c
gcc -g -Wall -c array.c
gcc -g -Wall -c list.c
gcc -g -Wall -c util.c
ar rcs libds_search.a tree.o array.o list.o util.o

ar rcs create an archive with .a extension, libds_search.a

(B)
~~~

  Change back to the main lab directory where you will find a file
  called `do_search.c' which uses search functions from the
  library. Attempting to compile this program on its own leads to
  several errors.  The first is simple:
  ,----
  | > gcc do_search.c
  | do_search.c:7:10: fatal error: ds_search.h: No such file or directory
  |  #include "ds_search.h"
  | 	  ^~~~~~~~~~~~~
  | compilation terminated.
  `----
  Unable to find a file to include, the compiler terminates.

  Fix this by notifying the compiler where that the `ds_search.h' file
  is in the library directory:
  ,----
  | > gcc do_search.c -I ds_search_static
  | ...
  `----
  The `-I' option allows additional directories to be searched for
  `#include' directive files. However, this is not the only problem.

  Show the linker errors that result from the compiling this way and
  describe why they appear.

	chouf001@csel-apollo:/home/chouf001/csci2021/lab14-code $ gcc do_search.c -I ds_search_static/
	/tmp/ccLDxZkG.o: In function `main':
	do_search.c:(.text+0x2b): undefined reference to `make_sequential_list'
	do_search.c:(.text+0x69): undefined reference to `linkedlist_search'
	do_search.c:(.text+0x9d): undefined reference to `linkedlist_search'
	do_search.c:(.text+0x134): undefined reference to `list_free'
	collect2: error: ld returned 1 exit status

	these functions are not implemented in the head file, do_search.h even though
	we have included a correct head file.

(C)
~~~

  The compiler can be notified of additional places to look for library
  code beyond standard system locations with the `-L' option.  In this
  case, the library `ds_search_static' contains the library. Finally,
  one must specify an additional library to link against,
  `libds_search.a' in this case though invocation drops the `lib' and
  `.a' parts. Run the following command:
  ,----
  | > gcc do_search.c  -I ds_search_static  -L ds_search_static  -lds_search
  | #                  ^^ includes dir ^^^  ^^ libray dir ^^^^^  ^^lib name^
  `----
  and then run the resulting executable to show its output.

	Searching 2048 elem array, 10 repeats: 3.1349e-01 seconds
	program pid is 672

(D)
~~~

  Run the `nm' command to show the symbol names present in the resulting
  executable.  Verify that the text definitions for library functions
  required by `do_search.c' are present and well-defined.  Show your
  output for `nm'

  Identify some library functions that are present in the executable
  that are not explicitly mentioned but are required for some library
  functions that are needed (thing random number generation).

  Are ALL functions from libds_search.a copied in or only those that are
  needed?

	0000000000601e28 d _DYNAMIC
	0000000000602000 d _GLOBAL_OFFSET_TABLE_
	0000000000400c60 R _IO_stdin_used
	                 w _ITM_deregisterTMCloneTable
	                 w _ITM_registerTMCloneTable
	                 w _Jv_RegisterClasses
	0000000000400ed0 r __FRAME_END__
	0000000000400cd8 r __GNU_EH_FRAME_HDR
	0000000000601e20 d __JCR_END__
	0000000000601e20 d __JCR_LIST__
	0000000000602070 D __TMC_END__
	0000000000602070 B __bss_start
	0000000000602058 D __data_start
	0000000000400690 t __do_global_dtors_aux
	0000000000601e18 t __do_global_dtors_aux_fini_array_entry
	0000000000602060 D __dso_handle
	0000000000601e10 t __frame_dummy_init_array_entry
	                 w __gmon_start__
	0000000000601e18 t __init_array_end
	0000000000601e10 t __init_array_start
	0000000000400c50 T __libc_csu_fini
	0000000000400be0 T __libc_csu_init
	                 U __libc_start_main@@GLIBC_2.2.5
	0000000000602070 D _edata
	0000000000602078 B _end
	0000000000400c54 T _fini
	0000000000400520 T _init
	00000000004005e0 T _start
	                 U clock@@GLIBC_2.2.5
	0000000000602070 b completed.7594
	0000000000602058 W data_start
	0000000000400610 t deregister_tm_clones
	00000000004006b0 t frame_dummy
	                 U free@@GLIBC_2.2.5
	                 U getchar@@GLIBC_2.2.5
	                 U getpid@@GLIBC_2.2.5
	000000000040083a T linkedlist_search
	0000000000400b35 T list_free
	00000000004006d6 T main
	0000000000400887 T make_sequential_list
	                 U malloc@@GLIBC_2.2.5
	0000000000400b94 T pb_rand
	0000000000400bc5 T pb_srand
	                 U printf@@GLIBC_2.2.5
	                 U puts@@GLIBC_2.2.5
	0000000000400650 t register_tm_clones
	0000000000602068 D state

	the functions to generate random numbers are at
	0000000000400b94 T pb_rand
	0000000000400bc5 T pb_srand

	Since we statically link the library, all functions from libds_search.a
	are copied.

Next Time
=========

  The next lab will cover how to construct a Dynamically Linked Shared
  Library.
