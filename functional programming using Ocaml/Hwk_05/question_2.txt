name: Ju-Yu, Chou Fu
ID: chouf001

foldl f v [] = v
foldl f v (x::xs) = foldl f (f v x) xs

and b1 b2 = if b1 then b2 else false

andl l = foldl and true l

(andl - CALL BY VALUE)

andl (true :: false :: true :: true :: [])
= foldl and true (true :: false :: true :: true :: [])
= foldl and (and true true) (false :: true :: true :: [])
= foldl and (if true then true else false) (false :: true :: true :: [])
= foldl and true (false :: true :: true :: [])
= foldl and (and true false) (true :: true :: [])
= foldl and (if true then false else false) (true :: true :: [])
= foldl and false (true :: true :: [])
= foldl and (and false true) (true :: [])
= foldl and (if false then true else false) (true :: [])
= foldl and false (true :: [])
= foldl and (and false true) ([])
= foldl and (if false then true else false) ([])
= foldl and false ([])
= false

foldl f v [] = v
foldl f v (x::xs) = foldl f (f v x) xs

and b1 b2 = if b1 then b2 else false

andl l = foldl and true l

(andl - CALL BY NAME)
andl (true :: false :: true :: true :: [])
= foldl and true (true :: false :: true :: true :: [])
= foldl and (and true true) (false :: true :: true :: [])
= foldl and (and (and true true) false) (true :: true :: [])
= foldl and (and (and (and true true) false) true) (true :: [])
= foldl and (and (and (and (and true true) false) true) true) ([])
= and (and (and (and true true) false) true) true
= and (and (and (if true then true else false) false) true) true
= and (and (and true false) true) true
= and (and (if true then false else false) true) true
= and (and false true) true
= and (if false then true then false) true
= and false true
= if false then true else false
= false

foldr f [] v = v
foldr f (x::xs) v = f x (foldr f xs v)

and b1 b2 = if b1 then b2 else false

andr l = foldr and l true

(andr - CALL BY VALUE)
andr (true::false::true::true::[])
= foldr and (true::false::true::true::[]) true
= and true (foldr and (false::true::true::[]) true)
= and true (and false (foldr and (true :: true :: []) true))
= and true (and false (and true (foldr and (true :: []) true)))
= and true (and false (and true (and true (foldr and [] true))))
= and true (and false (and true (and true true)))
= and true (and false (and true (if true then true else false)))
= and true (and false (and true true))
= and true (and false (if true then true else false))
= and true (and false true)
= and true (if false then true else false)
= and true false
= if true then false else false
= false

foldr f [] v = v
foldr f (x::xs) v = f x (foldr f xs v)

and b1 b2 = if b1 then b2 else false

andr l = foldr and l true

(andr - CALL BY NAME)
andr (true::false::true::true::[])
= foldr and (true::false::true::true::[]) true
= and true (foldr and (false::true::true::[]) true)
= if true then foldr and (false::true::true::[]) true else false
= foldr and (false::true::true::[]) true
= and false (foldr and (true :: true :: []) true)
= if false then (foldr and (true :: true :: []) true) else false
= false

andr - call by name is the most efficient one because the function doesn't
compute the tail right away. Furthermore, the and function skips the computation
for the tail because "if false then false".
